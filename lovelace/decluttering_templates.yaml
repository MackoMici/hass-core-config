mushroom_bar_template:
  default:
    - template: bar_card_right_tempalte
  card:
    type: custom:stack-in-card
    card_mod: &background_none
      style: |
        ha-card {
          background: none;
          border: none;
        }
    cards:
      - type: custom:layout-card
        layout_type: custom:grid-layout
        layout:
          grid-template-columns: 42px auto
          margin: -4px -4px -8px -4px;
        cards:
          - type: custom:decluttering-card
            template: mushroom_system_template
            variables:
             - entity: '[[entity]]'
          - type: custom:decluttering-card
            template: '[[template]]'
            variables:
             - entity: '[[entity]]'
             - name: '[[name]]'

mushroom_system_template:
  card:
    type: custom:mushroom-template-card
    <<: &none
      - tap_action: none
      - hold_action: none
      - double_tapaction: none
    card_mod: *background_none
    entity: '[[entity]]'
    icon: "{{ state_attr(config.entity, 'icon') }}"
    icon_color: var(--rgb-blue-color)

bar_card_right_tempalte:
  card:
    type: custom:bar-card
    <<: *none
    entity: '[[entity]]'
    height: 42px
    entity_row: true
    name: '[[name]]'
    positions:
      icon: off
      indicator: off
    card_mod:
      style: |
        ha-card {
          border: none;
          padding: 12px;
          margin-left: 12px;
        }
        bar-card-value {
          margin: 12px;
          font-size: 12px;
          font-weight: bolder;
        }
        bar-card-name {
          margin: 12px;
          font-size: 12px;
          font-weight: bolder;
        }
        bar-card-backgroundbar {
          opacity: 0.2;
          filter: brightness(1);
          background: linear-gradient(to right, #44A047, #56A540, #69AB3A, #7BB034, #8EB62E, #A1BB28, #B3C121, #C6C61B, #D8CC15, #EBD10F, #FED709,  #FEC80D, #FEB912, #FEAB17, #FE9C1C, #FE8E21, #FE7F26, #FE702B, #FE6230, #FE5335, #FF453A);
        }
        bar-card-currentbar	 {
          background: linear-gradient(to right, #44A047, #56A540, #69AB3A, #7BB034, #8EB62E, #A1BB28, #B3C121, #C6C61B, #D8CC15, #EBD10F, #FED709,  #FEC80D, #FEB912, #FEAB17, #FE9C1C, #FE8E21, #FE7F26, #FE702B, #FE6230, #FE5335, #FF453A);
          clip-path: polygon(0 0, var(--bar-percent) 0, var(--bar-percent) 100%, 0 100%);
        }

bar_card_left_tempalte:
  card:
    type: custom:bar-card
    <<: *none
    entity: '[[entity]]'
    height: 42px
    entity_row: true
    name: '[[name]]'
    positions:
      icon: off
      indicator: off
    card_mod:
      style: |
        ha-card {
          border: none;
          padding: 12px;
          margin-left: 12px;
        }
        bar-card-value {
          margin: 12px;
          font-size: 12px;
          font-weight: bolder;
        }
        bar-card-name {
          margin: 12px;
          font-size: 12px;
          font-weight: bolder;
        }
        bar-card-backgroundbar {
          opacity: 0.2;
          filter: brightness(1);
          background: linear-gradient(to left, #44A047, #56A540, #69AB3A, #7BB034, #8EB62E, #A1BB28, #B3C121, #C6C61B, #D8CC15, #EBD10F, #FED709,  #FEC80D, #FEB912, #FEAB17, #FE9C1C, #FE8E21, #FE7F26, #FE702B, #FE6230, #FE5335, #FF453A);
        }
        bar-card-currentbar	 {
          background: linear-gradient(to left, #44A047, #56A540, #69AB3A, #7BB034, #8EB62E, #A1BB28, #B3C121, #C6C61B, #D8CC15, #EBD10F, #FED709,  #FEC80D, #FEB912, #FEAB17, #FE9C1C, #FE8E21, #FE7F26, #FE702B, #FE6230, #FE5335, #FF453A);
          clip-path: polygon(0 0, var(--bar-percent) 0, var(--bar-percent) 100%, 0 100%);
        }

mushroom_update_template:
  card:
    type: custom:mushroom-template-card
    entity: '[[entity]]'
    card_mod: *background_none
    <<: *none
    primary: '[[primary]]'
    icon: '[[icon]]'
    icon_color: var(--rgb-blue-color)
    secondary: "{% if state_attr(entity, 'installed_version') == state_attr(entity, 'latest_version') %}
                  Naprakész
                {% else %}
                  Legújabb verzió - {{ state_attr(entity, 'latest_version') }}
                {% endif %}"

mushroom_karacsony_template:
  default:
    - primary: ''
    - icon_color: var(--rgb-blue-color)
    - icon: mdi:circle
    - entity: light.feny_fuzer
  card:
    type: custom:mushroom-template-card
    entity: '[[entity]]'
    card_mod: *background_none
    icon: '[[icon]]'
    icon_color: "{% if is_state(entity, 'on') %}
                   [[icon_color]]
                 {% endif %}"
    layout: vertical
    primary: '[[primary]]'
    tap_action:
      action: call-service
      service: '[[service]]'
    <<: &none2
      hold_action: none
      double_tap_action: none

mushroom_vacuum_template:
  card:
    type: custom:mushroom-template-card
    entity: '[[entity]]'
    card_mod: *background_none
    layout: vertical
    tap_action:
      action: toggle
    <<: *none2
    icon: '[[icon]]'
    icon_color: &icon_color
      "{% if is_state(entity, 'on') %}
         var(--rgb-orange-color)
       {% endif %}"
    primary: '[[primary]]'
    secondary: "{% set clean = { 'ago': (as_timestamp(now()) - as_timestamp(states[entity | join | regex_replace('boolean', 'datetime')].state)) / 60 / 60 } %}
                {% if clean.ago > 24 %}
                  {{ (clean.ago / 24) | int }} napja
                {% else %}
                  {{ (clean.ago / 24) | int }} órája
                {% endif %}"

mushroom_humidity_timer_template:
  card:
    type: custom:mushroom-template-card
    icon: '[[icon]]'
    card_mod: *background_none
    tap_action:
      action: call-service
      service: select.select_option
      data:
        option: "[[countdown]]"
      target:
        entity_id: select.aroma_diffuser_timer
    <<: *none2

mushroom_humidity_chip_template:
  card:
    type: custom:mushroom-chips-card
    card_mod:
      style: |
        ha-card {
          --chip-box-shadow: none;
          --chip-background: none;
          top: 16px;
          width: -webkit-fill-available;
          right: 12px;
          position: absolute;
        } 
        .chip-container {
          right: 0px;
          position: absolute;
        }
    chips: '[[chips]]'

mushroom_klima_template:
  default: 
    - entity: climate.gree_klima
    - service: climate.set_fan_mode
    - attr: fan_mode
  card:
    type: custom:mushroom-template-card
    card_mod: *background_none
    entity: '[[entity]]'
    layout: vertical
    primary: '[[primary]]'
    tap_action:
      action: call-service
      service: '[[service]]'
      data:
        '[[attr]]': '[[value]]'
      target:
        entity_id: '[[entity]]'
    <<: *none2
    icon: '[[icon]]'
    icon_color: |
      {% if not is_state(entity, 'off') %}
        {% if ('[[attr]]' == 'fan_mode') and ((is_state_attr(entity, 'preset_mode', 'boost')) or (is_state('switch.gree_klima_quiet', 'on'))) %}
        {% elif is_state_attr(entity, '[[attr]]', '[[value]]') %}
          var(--rgb-orange-color)
        {% endif %}
      {% endif %}

mushroom_klima_hvac_template:
  default: 
    - entity: climate.gree_klima
    - service: climate.set_hvac_mode
  card:
    type: custom:mushroom-template-card
    card_mod: *background_none
    entity: '[[entity]]'
    layout: vertical
    secondary: '[[secondary]]'
    tap_action:
      action: call-service
      service: '[[service]]'
      data:
        hvac_mode: '[[value]]'
      target:
        entity_id: '[[entity]]'
    <<: *none2
    icon: '[[icon]]'
    icon_color: |
      {% if is_state(entity, '[[value]]') %}
          var(--rgb-orange-color)
      {% endif %}

mushroom_entity_futes_template:
  card:
    type: custom:mushroom-entity-card
    entity: '[[entity]]'
    card_mod: *background_none
    primary_info: state
    secondary_info: name
    name: '[[name]]'
    icon_color: var(--rgb-blue-color)
    layout: horizontal
    <<: *none

mushroom_button_futes_template:
  default:
    - hold_action: none
    - secondary: "{% if is_state('timer.futes_mindenkepp', 'active') %}
                    Hátralévő idő {{ ((as_timestamp(state_attr('timer.futes_mindenkepp', 'finishes_at')) - as_timestamp(now())) / 60) | round(0) }} perc
                  {% endif %}"
  card:
    type: custom:mushroom-template-card
    layout: vertical
    entity: '[[entity]]'
    card_mod: *background_none
    icon: "{{ state_attr(config.entity, 'icon') }}"
    icon_color: *icon_color
    tap_action:
      action: toggle
    hold_action: '[[hold_action]]'
    double_tap_action: none
    primary: "{{ state_attr(config.entity, 'friendly_name') }}"
    secondary: '[[secondary]]'

mushroom_number_template:
  default:
    - display_mode: slider
  card:
    type: custom:mushroom-number-card
    <<: *none
    entity: '[[entity]]'
    card_mod: *background_none
    display_mode: '[[display_mode]]'

mushroom_light_template:
  default:
    - layout: horizontal
  card:
    type: custom:mushroom-light-card
    card_mod:
      style:
        mushroom-shape-icon$: |
          ha-icon {
            {% if is_state(config.entity, 'on') %}
              {% set light_level = ((state_attr(config.entity, "brightness") / 255) * 10) | round(0) * 10 %}
              --icon-animation: illumination 2s infinite;
              {% if light_level == 100 %}
                --card-mod-icon: mdi:lightbulb-on
              {% elif light_level > 0 %}
                --card-mod-icon:  mdi:lightbulb-on-{{ light_level }}
              {% else %}
                --card-mod-icon: mdi:lightbulb-on-outline
              {% endif %};
            {% endif %}
          }
          @keyframes illumination {
            0%, 100% { clip-path: inset(0 0 0 0); }
            80% { clip-path: polygon(0% 99%, 20% 55%, 22% 37%, 39% 20%, 61% 21%, 77% 35%, 79% 57%, 99% 100%); }
          }
        .: |
          ha-card {
            background: none;
            border: none;
          }
    entity: '[[entity]]'
    show_brightness_control: true
    show_color_control: true
    show_color_temp_control: true
    collapsible_controls: true
    layout: '[[layout]]'
    <<: *none2

mushroom_switch_light_template:
  card:
    type: custom:mushroom-light-card
    entity: '[[entity]]'
    layout: vertical
    <<: *none2
    card_mod: *background_none

mushroom_home_template:
  card:
    type: custom:mushroom-template-card
    secondary: '[[secondary]]'
    icon: '[[icon]]'
    icon_color: '[[color]]'
    layout: vertical
    tap_action:
      action: navigate
      navigation_path: '[[nav]]'
    <<: *none2
    card_mod:
      style: |
        ha-card { 
          background: var(--card-background-color);
          width: 54px;
          border-radius: 27px;
          margin: auto auto 1px auto
        }

weather_template:
  default:
    tap_action: none
    show_wind: speed
    show_precipitation_amounts: true
  card:
    type: custom:hourly-weather
    entity: '[[entity]]'
    name:
    card_mod: *background_none
    icons: true
    forecast_type: hourly
    language: hu
    num_segments: |
      {% set segments = 24 - now().hour %}
      {{ segments if segments >= 10 else 24 }}
    label_spacing: |
      {% set segments = 24 - now().hour %}
      {{ 4 if (segments > 14) or (segments < 10) else 2 }}
    <<: *none2
    tap_action: '[[tap_action]]'
    show_wind: '[[show_wind]]'
    show_precipitation_amounts: '[[show_precipitation_amounts]]'

atomic_calendar_template:
  card:
    type: custom:atomic-calendar-revive
    entities:
      - entity: '[[entity_1]]'
      - entity: '[[entity_2]]'
    card_mod: *background_none
    enableModeChange: true
    firstDayOfWeek: 1
    maxDaysToShow: 1
    refreshInterval: 240
    showLoader: false
    hideFinishedEvents: true
    showLocation: false
    hideDuplicates: true
    disableEventLink: true

datetime_template:
  default:
    color: white
    font-weight: bold
  element:
    type: state-label
    entity: '[[entity]]'
    <<: *none
    style:
      color: '[[color]]'
      filter: '[[filter]]'
      font-size: '[[font-size]]'
      font-weight: '[[font-weight]]'
      left: 50%
      top: '[[top]]'
      text-shadow: 0px 10px 10px var(--divider-color)
      z-index: '[[z-index]]'

person_template:
  card:
    type: custom:mushroom-person-card
    entity: '[[entity_person]]'
    icon_type: entity-picture
    primary_info: none
    secondary_info: none
    layout: vertical
    fill_container: false
    card_mod:
      style:
        mushroom-shape-avatar$: |
          .container:before {
            content: "";
            height: 100%;
            width: 100%;
            background: radial-gradient(rgb(var(--rgb-white)) 60%, transparent calc(60% + 1px)), conic-gradient(rgb(var(--rgb-orange)) {{ states['[[entity_battery]]'].state }}% 0%, transparent 0% 100%);
            border-radius: var(--icon-border-radius);
            position: absolute;
            -webkit-mask-image: radial-gradient(circle calc(var(--icon-size) / 2 - 2px) at 50% 50%, transparent 100%, black 0);
          }
        .: |
          ha-card {
            background: none;
            box-shadow: none;
            border: none;
          }
    <<: *none2
    tap_action:
      action: fire-dom-event
      browser_mod:
        service: browser_mod.popup
        data:
          style: |
            --popup-min-width: 800px;
            --popup-border-width: var(--ha-card-border-width, 0px);
            --popup-border-radius: var(--ha-card-border-radius, 12px);
            --popup-padding-x: 0px;
            --popup-padding-y: -2px;
            --popup-margin: -24px;
            --popup-background-color: var(--card-background-color);
          content:
            type: custom:layout-card
            layout_type: custom:grid-layout
            layout:
              grid-template-columns: 25% auto
              grid-template-rows: auto
              grid-template-areas: |
                "person map"
                "wifi map"
                "bluetooth map"
                "find map"
            cards:
              - type: custom:mushroom-person-card
                card_mod: *background_none
                entity: '[[entity_person]]'
                secondary_info: last-changed
                layout: vertical
                icon_type: entity-picture
                view_layout:
                  grid-area: person
                <<: *none
              - type: custom:mushroom-template-card
                card_mod: *background_none
                entity: '[[entity_wifi]]'
                <<: *none
                layout: vertical
                icon: |
                  {% set signal = {'level': states['[[entity_wifi]]' | map('lower') | join | regex_replace(find='_connection', replace='_signal_strength')].state | int | abs } %}
                  {% if signal.level > 90 %}
                    mdi:wifi-strength-outline
                  {% elif signal.level > 80 %} 
                    mdi:wifi-strength-1
                  {% elif signal.level > 70 %}
                    mdi:wifi-strength-2
                  {% elif signal.level > 60 %}
                    mdi:wifi-strength-3
                  {% elif signal.level > 1 %}
                    mdi:wifi-strength-4
                  {% else %}
                    mdi:wifi-strength-off
                  {% endif %}
                icon_color: "{% if is_state(entity, 'MiciMacko 5GHz') %}
                               var(--rgb-blue-color)
                             {% elif not is_state(entity, '<not connected>') %}
                               var(--rgb-green-color)
                             {% endif %}"
                primary: "{% if not is_state(entity, '<not connected>') %}
                            {{ states(entity) }}
                          {% else %}
                            Not Connected
                          {% endif %}"
                secondary: |
                  {% set signal = {'level': states['[[entity_wifi]]' | map('lower') | join | regex_replace(find='_connection', replace='_signal_strength')].state | int } %}
                  {% if signal.level  != -1 %}
                    {{ signal.level }} dBm
                  {% endif %}
                view_layout:
                  grid-area: wifi
              - type: custom:mushroom-template-card
                card_mod: *background_none
                tap_action: none
                double_tap_action: none
                hold_action:
                  action: call-service
                  service: '[[find_service]]'
                  data:
                    message: Ringing phone...
                    title: Find Phone
                    data:
                      ttl: 0
                      importance: high
                      priority: high
                      tag: Find
                      channel: alarm_stream
                layout: vertical
                icon: mdi:target
                icon_color: var(--rgb-red-color)
                primary: Find Phone
                view_layout:
                  grid-area: find
              - type: custom:mushroom-template-card
                entity: '[[entity_battery]]'
                <<: *none
                layout: vertical
                icon: |
                  {% set battery = {'state': states['[[entity_battery]]' | map('lower') | join | regex_replace(find='_battery_level', replace='_battery_state')].state } %}
                  {% if battery.state  == "charging" %}
                    mdi:battery-charging;
                  {% else %}
                    {{ state_attr(entity, 'icon') }}
                  {% endif %}
                primary: "{{ states['[[entity_battery]]' | map('lower') | join | regex_replace(find='_battery_level', replace='_battery_state')].state }}"
                secondary: "{{ states.[[entity_battery]].state }} %"
                card_mod:
                  style:
                    mushroom-shape-icon$: |
                      ha-icon {
                        {% set battery = {'state': states['[[entity_battery]]' | map('lower') | join | regex_replace(find='_battery_level', replace='_battery_state')].state } %}
                        {% if battery.state  == "charging" %}
                          --icon-animation: charge 3s linear infinite;
                          --card-mod-icon: mdi:battery-charging;
                        {% endif %}
                      }
                      @keyframes charge {
                        0%, 80% { clip-path: inset(0 0 0 0); }
                        10% { clip-path: polygon(0% 0%, 0% 100%, 34% 100%, 34% 24%, 67% 24%, 67% 84%, 34% 84%, 34% 100%, 100% 100%, 100% 0%); }
                        20% { clip-path: polygon(0% 0%, 0% 100%, 34% 100%, 34% 24%, 67% 24%, 67% 74%, 34% 74%, 34% 100%, 100% 100%, 100% 0%); }
                        30% { clip-path: polygon(0% 0%, 0% 100%, 34% 100%, 34% 24%, 67% 24%, 67% 64%, 34% 64%, 34% 100%, 100% 100%, 100% 0%); }
                        40% { clip-path: polygon(0% 0%, 0% 100%, 34% 100%, 34% 24%, 67% 24%, 67% 54%, 34% 54%, 34% 100%, 100% 100%, 100% 0%); }
                        50% { clip-path: polygon(0% 0%, 0% 100%, 34% 100%, 34% 24%, 67% 24%, 67% 44%, 34% 44%, 34% 100%, 100% 100%, 100% 0%); }
                        60% { clip-path: polygon(0% 0%, 0% 100%, 34% 100%, 34% 24%, 67% 24%, 67% 34%, 34% 34%, 34% 100%, 100% 100%, 100% 0%); }
                        70% { clip-path: polygon(0% 0%, 0% 100%, 34% 100%, 34% 24%, 67% 24%, 67% 24%, 34% 24%, 34% 100%, 100% 100%, 100% 0%); }
                      }
                    .: |
                      ha-card {
                        background: none;
                        box-shadow: none;
                      }
                icon_color: "{% set battery = { 
                               'level': states[entity].state | int,
                               'state': states[entity | map('lower') | join | regex_replace(find='_battery_level', replace='_battery_state')].state
                             } %}
                             {% if battery.state  == 'charging' %}
                               var(--rgb-blue-color)
                             {% elif battery.level > 80 %}
                               var(--rgb-green-color)
                             {% elif battery.level <= 80 and battery.level >= 25 %}
                               var(--rgb-orange-color)
                             {% else %}
                               var(--rgb-red-color)
                             {% endif %}"
                view_layout:
                  grid-area: bluetooth
              - type: map
                default_zoom: 16
                entities: 
                  - '[[entity_device]]'
                view_layout:
                  grid-area: map

