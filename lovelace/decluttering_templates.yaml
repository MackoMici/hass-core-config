gauge_template:
  card:
    type: gauge
    card_mod: &background_none
      style: |
        ha-card {
          background: none;
          box-shadow: none;
        }
    entity: '[[entity]]'
    name: '[[name]]'
    segments:
      - from: 100
        color: '#FF453A'
      - from: 95
        color: '#FE5335'
      - from: 90
        color: '#FE6230'
      - from: 85
        color: '#FE702B'
      - from: 80
        color: '#FE7F26'
      - from: 75
        color: '#FE8E21'
      - from: 70
        color: '#FE9C1C'
      - from: 65
        color: '#FEAB17'
      - from: 60
        color: '#FEB912'
      - from: 55
        color: '#FEC80D'
      - from: 50
        color: '#FED709'
      - from: 45
        color: '#EBD10F'
      - from: 40
        color: '#D8CC15'
      - from: 35
        color: '#C6C61B'
      - from: 30
        color: '#B3C121'
      - from: 25
        color: '#A1BB28'
      - from: 20
        color: '#8EB62E'
      - from: 15
        color: '#7BB034'
      - from: 10
        color: '#69AB3A'
      - from: 5
        color: '#56A540'
      - from: 0
        color: '#44A047'

mushroom_update_template:
  card:
    type: custom:mushroom-template-card
    entity: '[[entity]]'
    card_mod: *background_none
    <<: &none
      - tap_action: none
      - hold_action: none
      - double_tapaction: none
    primary: '[[primary]]'
    icon: '[[icon]]'
    icon_color: '#2196f3'
    secondary: "{% if state_attr(entity, 'installed_version') == state_attr(entity, 'latest_version') %}
                  Naprakész
                {% else %}
                  Legújabb verzió - {{ state_attr(entity, 'latest_version') }}
                {% endif %}"

mushroom_karacsony_template:
  default:
    - primary: ''
    - icon_color: blue
    - icon: mdi:circle
    - entity: light.feny_fuzer
  card:
    type: custom:mushroom-template-card
    entity: '[[entity]]'
    card_mod: *background_none
    icon: '[[icon]]'
    icon_color: "{% if is_state(entity, 'on') %}
                   [[icon_color]]
                 {% endif %}"
    layout: vertical
    primary: '[[primary]]'
    tap_action:
      action: call-service
      service: '[[service]]'
    <<: &none2
      hold_action: none
      double_tap_action: none

mushroom_vacuum_template:
  card:
    type: custom:mushroom-template-card
    entity: '[[entity]]'
    card_mod: *background_none
    layout: vertical
    tap_action:
      action: toggle
    <<: *none2
    icon: '[[icon]]'
    icon_color: &icon_color
      "{% if is_state(entity, 'on') %}
         orange
       {% endif %}"
    primary: '[[primary]]'
    secondary: "{% set clean = { 'ago': (as_timestamp(now()) - as_timestamp(states[entity | join | regex_replace('boolean', 'datetime')].state)) / 60 / 60 } %}
                {% if clean.ago > 24 %}
                  {{ (clean.ago / 24) | int }} napja
                {% else %}
                  {{ (clean.ago / 24) | int }} órája
                {% endif %}"

mushroom_humidity_timer_template:
  card:
    type: custom:mushroom-template-card
    icon: '[[icon]]'
    card_mod: *background_none
    tap_action:
      action: call-service
      service: select.select_option
      data:
        option: "[[countdown]]"
      target:
        entity_id: select.aroma_diffuser_timer
    <<: *none2

mushroom_humidity_chip_template:
  card:
    type: custom:mushroom-chips-card
    card_mod:
      style: |
        ha-card {
          --chip-box-shadow: none;
          --chip-background: none;
          top: 16px;
          width: -webkit-fill-available;
          right: 12px;
          position: absolute;
        } 
        .chip-container {
          right: 0px;
          position: absolute;
        }
    chips: '[[chips]]'

mushroom_klima_template:
  default: 
    - entity: climate.gree_klima
    - service: climate.set_fan_mode
    - attr: fan_mode
  card:
    type: custom:mushroom-template-card
    card_mod: *background_none
    entity: '[[entity]]'
    layout: vertical
    primary: '[[primary]]'
    tap_action:
      action: call-service
      service: '[[service]]'
      data:
        '[[attr]]': '[[value]]'
      target:
        entity_id: '[[entity]]'
    <<: *none2
    icon: '[[icon]]'
    icon_color: |
      {% if not is_state(entity, 'off') %}
        {% if is_state_attr(entity, '[[attr]]', '[[value]]') %}
          orange
        {% endif %}
      {% endif %}

mushroom_entity_futes_template:
  default:
    - color: '#2196f3'
    - layout: horizontal
  card:
    type: custom:mushroom-entity-card
    entity: '[[entity]]'
    card_mod: *background_none
    primary_info: state
    secondary_info: name
    name: '[[name]]'
    icon_color: '[[color]]'
    layout: '[[layout]]'
    <<: *none

mushroom_button_futes_template:
  default:
    - hold_action: none
    - secondary: "{% if is_state('timer.futes_mindenkepp', 'active') %}
                    Hátralévő idő {{ ((as_timestamp(state_attr('timer.futes_mindenkepp', 'finishes_at')) - as_timestamp(now())) / 60) | round(0) }} perc
                  {% endif %}"
  card:
    type: custom:mushroom-template-card
    layout: vertical
    entity: '[[entity]]'
    card_mod: *background_none
    icon: "{{ state_attr(config.entity, 'icon') }}"
    icon_color: *icon_color
    tap_action:
      action: toggle
    hold_action: '[[hold_action]]'
    double_tap_action: none
    primary: "{{ state_attr(config.entity, 'friendly_name') }}"
    secondary: '[[secondary]]'

mushroom_light_template:
  card:
    type: custom:mushroom-light-card
    card_mod:
      style:
        mushroom-shape-icon$: |
          ha-icon {
            {% if is_state(config.entity, 'on') %}
              {% set light_level = ((state_attr(config.entity, "brightness") / 255) * 10) | round(0) * 10 %}
              --icon-animation: illumination 2s infinite;
              {% if light_level == 100 %}
                --card-mod-icon: mdi:lightbulb-on
              {% elif light_level > 0 %}
                --card-mod-icon:  mdi:lightbulb-on-{{ light_level }}
              {% else %}
                --card-mod-icon: mdi:lightbulb-on-outline
              {% endif %};
            {% endif %}
          }
          @keyframes illumination {
            0%, 100% { clip-path: inset(0 0 0 0); }
            80% { clip-path: polygon(0% 99%, 20% 55%, 22% 37%, 39% 20%, 61% 21%, 77% 35%, 79% 57%, 99% 100%); }
          }
        .: |
          ha-card {
            background: none;
            box-shadow: none;
          }
    entity: '[[entity]]'
    show_brightness_control: true
    show_color_control: true
    show_color_temp_control: true
    collapsible_controls: true
    <<: *none2

mushroom_switch_light_template:
  card:
    type: custom:mushroom-light-card
    entity: '[[entity]]'
    layout: vertical
    <<: *none2
    card_mod: *background_none

mushroom_home_template:
  card:
    type: custom:mushroom-template-card
    primary: ''
    secondary: '[[secondary]]'
    icon: '[[icon]]'
    icon_color: '[[color]]'
    layout: vertical
    tap_action:
      action: navigate
      navigation_path: '[[nav]]'
    <<: *none2
    card_mod:
      style: |
        ha-card { 
          background: var(--card-background-color);
          width: 54px;
          border-radius: 27px;
          margin: auto auto 1px auto
        }

weather_template:
  default:
    tap_action: none
    show_wind: speed
    show_precipitation_amounts: true
  card:
    type: custom:hourly-weather
    entity: '[[entity]]'
    name:
    card_mod: *background_none
    icons: true
    language: hu
    num_segments: |
      {% set segments = 24 - now().hour %}
      {{ segments if segments >= 10 else 24 }}
    label_spacing: |
      {% set segments = 24 - now().hour %}
      {{ 4 if (segments > 19) or (segments < 10) else 2 }}
    <<: *none2
    tap_action: '[[tap_action]]'
    show_wind: '[[show_wind]]'
    show_precipitation_amounts: '[[show_precipitation_amounts]]'

atomic_calendar_template:
  card:
    type: custom:atomic-calendar-revive
    entities:
      - entity: '[[entity_1]]'
      - entity: '[[entity_2]]'
    card_mod: *background_none
    enableModeChange: true
    firstDayOfWeek: 1
    maxDaysToShow: 1
    refreshInterval: 240
    showLoader: false
    hideFinishedEvents: true
    showLocation: false
    hideDuplicates: true
    disableEventLink: true

datetime_template:
  default:
    color: white
    font-weight: bold
  element:
    type: state-label
    entity: '[[entity]]'
    <<: *none
    style:
      color: '[[color]]'
      filter: '[[filter]]'
      font-size: '[[font-size]]'
      font-weight: '[[font-weight]]'
      left: 50%
      top: '[[top]]'
      text-shadow: 0px 10px 10px var(--divider-color)
      z-index: '[[z-index]]'

sidebar_person_template:
  card:
    type: custom:button-card
    entity: '[[entity_person]]'
    aspect_ratio: 1/1
    label: |
      [[[
        return 'Battery: ' + states['[[entity_battery]]'].state + '%';
      ]]]
    state_display: |
      [[[
        if (entity.state == "home")
          return "Otthon";
        else
          return "Távol";
      ]]]
    styles:
      card:
        - background-image: url("[[background_url]]")
        - background-size: 100% 100%
      state:
        - font-weight: bold
        - background-color: rgba(0, 0, 0, 0.4)
        - color: var(--text-primary-color)
        - transform: initial
        - width: 100%
        - align-self: start
        - line-height: 30px
      label:
        - font-weight: bold
        - background-color: rgba(0, 0, 0, 0.4)
        - color: var(--text-primary-color)
        - transform: initial
        - width: 100%
        - align-self: end
        - line-height: 30px
    show_icon: false
    show_name: false
    show_state: true
    show_label: true
    tap_action:
      action: fire-dom-event
      browser_mod:
        service: browser_mod.popup
        data:
          style: |
            --popup-min-width: 700px;
            --popup-border-width: var(--ha-card-border-width, 0px);
            --popup-border-radius: var(--ha-card-border-radius, 12px);
            --popup-padding-x: 0px;
            --popup-padding-y: -2px;
            --popup-margin: -24px;
          content:
            type: custom:vertical-stack-in-card
            cards:
              - type: custom:mushroom-person-card
                entity: '[[entity_person]]'
                icon: '[[icon_person]]'
                secondary_info: last-changed
              - type: grid
                square: false
                columns: 3
                cards:
                  - type: custom:mushroom-template-card
                    entity: '[[entity_wifi]]'
                    <<: *none
                    layout: vertical
                    icon: |
                      {% set signal = {'level': states['[[entity_wifi]]' | map('lower') | join | regex_replace(find='_connection', replace='_signal_strength')].state | int | abs } %}
                      {% if signal.level > 90 %}
                        mdi:wifi-strength-outline
                      {% elif signal.level > 80 %} 
                        mdi:wifi-strength-1
                      {% elif signal.level > 70 %}
                        mdi:wifi-strength-2
                      {% elif signal.level > 60 %}
                        mdi:wifi-strength-3
                      {% elif signal.level > 1 %}
                        mdi:wifi-strength-4
                      {% else %}
                        mdi:wifi-strength-off
                      {% endif %}
                    icon_color: "{% if is_state(entity, 'MiciMacko 5GHz') %}
                                   blue
                                 {% elif not is_state(entity, '<not connected>') %}
                                   green
                                 {% endif %}"
                    primary: "{% if not is_state(entity, '<not connected>') %}
                                {{ states(entity) }}
                              {% else %}
                                Not Connected
                              {% endif %}"
                    secondary: |
                      {% set signal = {'level': states['[[entity_wifi]]' | map('lower') | join | regex_replace(find='_connection', replace='_signal_strength')].state | int } %}
                      {% if signal.level  != -1 %}
                        {{ signal.level }} dBm
                      {% endif %}
                  - type: custom:mushroom-template-card
                    tap_action: none
                    double_tap_action: none
                    hold_action:
                      action: call-service
                      service: '[[find_service]]'
                      data:
                        message: Ringing phone...
                        title: Find Phone
                        data:
                          ttl: 0
                          importance: high
                          priority: high
                          tag: Find
                          channel: alarm_stream
                    layout: vertical
                    icon: mdi:target
                    icon_color: red
                    primary: Find Phone
                  - type: custom:mushroom-template-card
                    entity: '[[entity_battery]]'
                    <<: *none
                    layout: vertical
                    icon: |
                      {% set battery = {'state': states['[[entity_battery]]' | map('lower') | join | regex_replace(find='_battery_level', replace='_battery_state')].state } %}
                      {% if battery.state  == "charging" %}
                        mdi:battery-charging;
                      {% else %}
                        {{ state_attr(entity, 'icon') }}
                      {% endif %}
                    primary: "{{ states['[[entity_battery]]' | map('lower') | join | regex_replace(find='_battery_level', replace='_battery_state')].state }}"
                    secondary: "{{ states.[[entity_battery]].state }} %"
                    card_mod:
                      style:
                        mushroom-shape-icon$: |
                          ha-icon {
                            {% set battery = {'state': states['[[entity_battery]]' | map('lower') | join | regex_replace(find='_battery_level', replace='_battery_state')].state } %}
                            {% if battery.state  == "charging" %}
                              --icon-animation: charge 3s linear infinite;
                              --card-mod-icon: mdi:battery-charging;
                            {% endif %}
                          }
                          @keyframes charge {
                            0%, 80% { clip-path: inset(0 0 0 0); }
                            10% { clip-path: polygon(0% 0%, 0% 100%, 34% 100%, 34% 24%, 67% 24%, 67% 84%, 34% 84%, 34% 100%, 100% 100%, 100% 0%); }
                            20% { clip-path: polygon(0% 0%, 0% 100%, 34% 100%, 34% 24%, 67% 24%, 67% 74%, 34% 74%, 34% 100%, 100% 100%, 100% 0%); }
                            30% { clip-path: polygon(0% 0%, 0% 100%, 34% 100%, 34% 24%, 67% 24%, 67% 64%, 34% 64%, 34% 100%, 100% 100%, 100% 0%); }
                            40% { clip-path: polygon(0% 0%, 0% 100%, 34% 100%, 34% 24%, 67% 24%, 67% 54%, 34% 54%, 34% 100%, 100% 100%, 100% 0%); }
                            50% { clip-path: polygon(0% 0%, 0% 100%, 34% 100%, 34% 24%, 67% 24%, 67% 44%, 34% 44%, 34% 100%, 100% 100%, 100% 0%); }
                            60% { clip-path: polygon(0% 0%, 0% 100%, 34% 100%, 34% 24%, 67% 24%, 67% 34%, 34% 34%, 34% 100%, 100% 100%, 100% 0%); }
                            70% { clip-path: polygon(0% 0%, 0% 100%, 34% 100%, 34% 24%, 67% 24%, 67% 24%, 34% 24%, 34% 100%, 100% 100%, 100% 0%); }
                          }
                    icon_color: "{% set battery = { 
                                   'level': states[entity].state | int,
                                   'state': states[entity | map('lower') | join | regex_replace(find='_battery_level', replace='_battery_state')].state
                                 } %}
                                 {% if battery.state  == 'charging' %}
                                   blue
                                 {% elif battery.level > 80 %}
                                   green
                                 {% elif battery.level <= 80 and battery.level >= 25 %}
                                   orange
                                 {% else %}
                                   red
                                 {% endif %}"
              - type: map
                default_zoom: 16
                entities: 
                  - '[[entity_device]]'
